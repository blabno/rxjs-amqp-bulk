{"version":3,"sources":["../../test/es-sync.spec.js"],"names":[],"mappings":"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","file":"es-sync.spec.js","sourcesContent":["const chai = require('chai')\nconst expect = chai.expect\n\nconst Promise = require('bluebird')\nconst _ = require('lodash/fp');\nconst url = require('url')\nconst uuid = require('node-uuid')\nconst $http = require('http-as-promised')\nconst sinon = require('sinon')\nconst monkeypatch = require('monkeypatch')\n\nconst config = require('./config')\n\nconst Api = require('../lib/api')\nconst AmqpConnectionFactory = require('../lib/amqp-connection')\nconst EsSync = require('../lib/es-sync')\nconst EsSetup = require('../lib/es-setup')\n\nconst esSync = EsSync(config)\nconst esSetup = EsSetup(config)\n\nPromise.longStackTraces()\nchai.config.includeStack = true\n\nconst equipmentId = uuid.v4()\n\n\ndescribe('AMQP Elasticsearch bulk sync', ()=> {\n\n    beforeEach(()=> {\n\n        global.amqpConnection = amqpConnectionFactory.connect(config)\n        const channelWrapper = amqpConnection.createChannel({\n            setup: (channel) => {\n                return Promise.all([\n                    channel.assertExchange('change.events', 'topic'),\n                    channel.assertQueue('es.sync'),\n                    channel.purgeQueue('es.sync'),\n                    channel.bindQueue('es.sync', 'change.events', 'trackingData.insert')])\n            }\n        })\n        return channelWrapper.waitForConnect()\n            .then(()=> {\n                return channelWrapper.close()\n            })\n\n    })\n\n    afterEach(()=> {\n        return global.amqpConnection.close()\n    })\n\n    describe('AMQP rxjs', ()=> {\n\n        it('feeds amqp messages with associated channel information and an ack/nack shorthands into an observer', (done)=> {\n\n            const subscription = esSync.esQueueObservable(global.amqpConnection)\n                .subscribe(\n                    (event)=> {\n                        event.channel.ack(event.msg)\n                        const content = JSON.parse(event.msg.content.toString())\n                        if (content.attributes.canVariableValue === 4) {\n                            expect(event.channel).to.not.be.null\n                            expect(event.msg).to.not.be.null\n                            subscription.dispose()\n                            done()\n                        }\n                    }\n                );\n\n            const sendChannel = global.amqpConnection.createChannel({json: true})\n            trackingData(config.bufferCount).forEach((trackingDataMessage) => {\n                return sendChannel.publish('change.events', 'trackingData.insert', trackingDataMessage)\n            })\n\n        })\n    })\n\n    describe('End to End', ()=> {\n\n        beforeEach(() => {\n            return Promise.resolve()\n                .then(apiStart)\n                .then(clearData)\n                .then(createEquipment)\n                .then(esSetup.deleteIndex)\n                .then(esSetup.putIndex)\n                .then(esSetup.putMapping)\n\n            function apiStart() {\n                return Api.start(global.amqpConnection, config)\n                    .then((server)=> {\n                        global.server = server\n                        global.adapter = server.plugins['hapi-harvester'].adapter\n                    })\n            }\n\n            function clearData() {\n                const models = global.adapter.models\n                const removeModels = _.map((model)=> models[model].remove({}).exec());\n                return Promise.all(removeModels(['equipment', 'trackingData']))\n            }\n\n            function createEquipment() {\n                return global.adapter.create('equipment', {\n                    id: equipmentId,\n                    type: 'equipment',\n                    attributes: {\n                        identificationNumber: '5NPE24AF8FH002410'\n                    }\n                })\n            }\n        })\n\n\n        afterEach(()=> {\n            return global.server.stop()\n        })\n\n        it('should buffer changes, enrich and bulk sync to ES', (done)=> {\n\n            postTrackingData(config.bufferCount).then((trackingData)=> {\n\n                    const subscription = esSync.pipeline(esSync.esQueueObservable(amqpConnection))\n                        .subscribe(\n                            (events)=> verifyResultsInEsAndDispose(trackingData, subscription).then(done),\n                            done\n                        );\n                },\n                done\n            )\n\n        })\n\n        it('should ack the messages', (done)=> {\n\n            postTrackingData(config.bufferCount).then((trackingData)=> {\n\n                const esQueueObservable = esSync.esQueueObservable(amqpConnection)\n                    .map((event)=> {\n                        // only wrap it once, all events should carry the same channel\n                        if (!event.channel.ack.isSinonProxy) {\n                            sinon.spy(event.channel, 'ack')\n                        }\n                        return event\n                    })\n\n                esSync.pipeline(esQueueObservable)\n                    .subscribe((events)=> {\n                            const first = _.first(events);\n                            expect(first.source.channel.ack.callCount).to.equal(20)\n                            done()\n                        },\n                        done)\n            }, done)\n        })\n\n        it('should retry the pipeline on failure', (done)=> {\n\n            var i = 0\n            monkeypatch(esSync, 'enrichBufferAndSync', function (original, events) {\n                return Promise.resolve()\n                    .then(()=> {\n                        i++\n                        if (i < 3) {\n                            throw new Error(`force reject ${i}`)\n                        }\n                    })\n                    .then(()=> original(events))\n            })\n\n            postTrackingData(config.bufferCount).then((trackingData)=> {\n\n                    const subscription = esSync.pipeline(esSync.esQueueObservable(amqpConnection))\n                        .subscribe(\n                            ()=> verifyResultsInEsAndDispose(trackingData, subscription).then(done),\n                            done\n                        )\n                }\n            )\n\n        })\n\n        it('should gracefully recover when the AMQP connection fails before messages are ack\\'ed', (done)=> {\n\n            var i = 0\n            monkeypatch(esSync, 'enrichBufferAndSync', function (original, events) {\n                return Promise.resolve()\n                    .then(()=> {\n                        i++\n                        if (i < 3) {\n                            _.first(events).channel.connection.stream.destroy()\n                        }\n                    })\n                    .then(()=> original(events))\n            })\n\n            postTrackingData(config.bufferCount).then((trackingData)=> {\n\n                    const subscription = esSync.pipeline(esSync.esQueueObservable(amqpConnection))\n                        .skip(2) // ack on a broken channel/connection doesn't result in an error so skip the first observed value batches\n                        .subscribe(\n                            ()=> verifyResultsInEsAndDispose(trackingData, subscription).then(done),\n                            done\n                        );\n                }\n            )\n\n        })\n\n        it('should be able to cope with 1000 trackingData messages under 6 secs', (done)=> {\n\n            const docs = config.bufferCount * 50\n\n            postTrackingData(docs)\n                .then(()=> {\n                    const begin = new Date()\n\n                    const subscription = esSync.pipeline(esSync.esQueueObservable(amqpConnection))\n                        .bufferWithCount(docs / config.bufferCount)\n                        .subscribe(\n                            (events)=> {\n                                const end = new Date()\n                                const duration = end - begin;\n                                console.log(`time took : ${duration}`)\n                                expect(duration).to.be.below(6000)\n                                subscription.dispose()\n                                done()\n                            },\n                            done\n                        );\n                })\n\n        })\n\n        function verifyResultsInEsAndDispose(trackingData, subscription) {\n            return Promise.all(lookupTrackingDataInEs((trackingData)))\n                .then((trackingDataFromEs)=> {\n                    expect(trackingDataFromEs.length).to.equal(config.bufferCount)\n                    subscription.dispose()\n                })\n        }\n\n        const lookupTrackingDataInEs = _.map((trackingDataItem)=> {\n            return $http({\n                uri: `${config.esHostUrl}/telemetry/trackingData/${trackingDataItem.data.id}`,\n                method: 'get',\n                json: true\n            }).spread((res, body)=> body)\n        })\n\n        function postTrackingData(maxRange) {\n\n            return Promise\n                .map(trackingData(maxRange), post, {concurrency: 10})\n\n            function post(trackingDataItem) {\n                return $http({\n                    uri: `http://localhost:3000/trackingData`,\n                    method: 'post',\n                    json: {data: trackingDataItem}\n                }).spread((res, body) => body)\n            }\n        }\n\n    })\n\n})\n\nfunction trackingData(rangeMax) {\n    return _.range(0, rangeMax).map((i)=> {\n        return {\n            id: uuid.v4(),\n            type: 'trackingData',\n            attributes: {\n                heading: 10,\n                canVariableValue: i\n            },\n            relationships: {\n                equipment: {\n                    data: {type: 'equipment', id: equipmentId}\n                }\n            }\n        }\n    })\n}\n\n\n"]}